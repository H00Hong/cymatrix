from typing import Union, Tuple, List
from array import array as parray


class cyMatrix:
    def __init__(self, nrows: int, ncols: int, ndim: int) -> None: ...
    

def copy(m: cyMatrix) -> cyMatrix: ...
def setitem(m: cyMatrix, value: Union[int, float], nrow: int, ncol: int) -> None: ...
def setitems(m: cyMatrix, value: cyMatrix, nrow: int, ncol: int, rstep: int, cstep: int) -> None: ...
def getitem(m: cyMatrix, nrow: int, ncol: int) -> cyMatrix: ...
def getitems(m: cyMatrix, ndim: int, n1: slice, n2: slice) -> cyMatrix: ...
def transpos(m: cyMatrix) -> cyMatrix: ...

def matmul(m1: cyMatrix, m2: cyMatrix) -> cyMatrix: ...
def iadd(m1: cyMatrix, m_other: cyMatrix) -> cyMatrix: ...
def isub(m1: cyMatrix, m_other: cyMatrix, isAfter: bool) -> cyMatrix: ...
def imul(m1: cyMatrix, m_other: cyMatrix) -> cyMatrix: ...
def itruediv(m1: cyMatrix, m_other: cyMatrix, isAfter: bool) -> cyMatrix: ...
def imod(m1: cyMatrix, m_other: cyMatrix, isAfter: bool) -> cyMatrix: ...
def ifloordiv(m1: cyMatrix, m_other: cyMatrix, isAfter: bool) -> cyMatrix: ...
def ipow(m1: cyMatrix, m_other: cyMatrix) -> cyMatrix: ...

def lt(m1: cyMatrix, m2: cyMatrix) -> Union[bool, List[bool], List[List[bool]]]: ...
def le(m1: cyMatrix, m2: cyMatrix) -> Union[bool, List[bool], List[List[bool]]]: ...
def gt(m1: cyMatrix, m2: cyMatrix) -> Union[bool, List[bool], List[List[bool]]]: ...
def ge(m1: cyMatrix, m2: cyMatrix) -> Union[bool, List[bool], List[List[bool]]]: ...
def eq(m1: cyMatrix, m2: cyMatrix) -> Union[bool, List[bool], List[List[bool]]]: ...
def ne(m1: cyMatrix, m2: cyMatrix) -> Union[bool, List[bool], List[List[bool]]]: ...

def add_concatenate(m1: cyMatrix, m2: cyMatrix, axis0: bool, isColVector: bool) -> cyMatrix: ...
def swap_row(m: cyMatrix, r1: int, r2: int) -> cyMatrix: ...
def swap_col(m: cyMatrix, c1: int, c2: int) -> cyMatrix: ...

def rad2deg(m: cyMatrix) -> cyMatrix: ...
def deg2rad(m: cyMatrix) -> cyMatrix: ...
def sin(m: cyMatrix, isRad: bool) -> cyMatrix: ...
def cos(m: cyMatrix, isRad: bool) -> cyMatrix: ...
def tan(m: cyMatrix, isRad: bool) -> cyMatrix: ...
def asin(m: cyMatrix) -> cyMatrix: ...
def acos(m: cyMatrix) -> cyMatrix: ...
def atan(m: cyMatrix) -> cyMatrix: ...
def atan2(m1: cyMatrix, m2: cyMatrix) -> cyMatrix: ...
def exp(m: cyMatrix) -> cyMatrix: ...
def exp2(m: cyMatrix) -> cyMatrix: ...
def expm1(m: cyMatrix) -> cyMatrix: ...
def log1p(m: cyMatrix) -> cyMatrix: ...
def log(m: cyMatrix) -> cyMatrix: ...
def log2(m: cyMatrix) -> cyMatrix: ...
def log10(m: cyMatrix) -> cyMatrix: ...
def sqrt(m: cyMatrix) -> cyMatrix: ...
def cbrt(m: cyMatrix) -> cyMatrix: ...
def numrt(m: cyMatrix, num: int) -> cyMatrix: ...
def hypot(m1: cyMatrix, m2: cyMatrix) -> cyMatrix: ...
def abs(m: cyMatrix) -> cyMatrix: ...
def floor(m: cyMatrix) -> cyMatrix: ...
def ceil(m: cyMatrix) -> cyMatrix: ...
def round(m: cyMatrix, digits: int) -> cyMatrix: ...
def sign(m: cyMatrix) -> cyMatrix: ...
def nan2num(m: cyMatrix) -> cyMatrix: ...

def sort(m: cyMatrix, axis: int) -> cyMatrix: ...
def index(m: cyMatrix, num: float) -> cyMatrix: ...
def argsort(m: cyMatrix, axis: int) -> cyMatrix: ...
def max(m: cyMatrix, axis: int) -> cyMatrix: ...
def min(m: cyMatrix, axis: int) -> cyMatrix: ...
def sum(m: cyMatrix, axis: int) -> cyMatrix: ...
def prod(m: cyMatrix, axis: int) -> cyMatrix: ...
def mean(m: cyMatrix, axis: int) -> cyMatrix: ...
def median(m: cyMatrix, axis: int) -> cyMatrix: ...
def sum_squares(m: cyMatrix, axis: int) -> cyMatrix: ...
def norm(m: cyMatrix, axis: int) -> cyMatrix: ...
def rms(m: cyMatrix, axis: int) -> cyMatrix: ...
def var(m: cyMatrix, axis: int) -> cyMatrix: ...
def std(m: cyMatrix, axis: int) -> cyMatrix: ...
def ptp(m: cyMatrix, axis: int) -> cyMatrix: ...
def diff(m: cyMatrix, axis: int) -> cyMatrix: ...

def trace(m: cyMatrix) -> cyMatrix: ...
def diag(m: cyMatrix) -> cyMatrix: ...
def det(m: cyMatrix) -> cyMatrix: ...
def inv(m: cyMatrix) -> cyMatrix: ...

def interp1d_2_mco(x: cyMatrix, y: cyMatrix, dtype: int) -> cyMatrix: ...
def interp1d_3_mco(x: cyMatrix, y: cyMatrix, dtype: int) -> cyMatrix: ...

def flip(m: cyMatrix, axis: int) -> cyMatrix: ...
def repeat(m: cyMatrix, n: int, axis: int) -> cyMatrix: ...
def maximum(m1: cyMatrix, m2: cyMatrix) -> cyMatrix: ...
def minimum(m1: cyMatrix, m2: cyMatrix) -> cyMatrix: ...
def argmin(m: cyMatrix, axis: int) -> cyMatrix: ...
def argmax(m: cyMatrix, axis: int) -> cyMatrix: ...

def extract(condition: parray, m: cyMatrix) -> cyMatrix: ...
def compress(condition: parray, m: cyMatrix, axis: int) -> cyMatrix: ...
def compress_setitem(condition: parray, m: cyMatrix, val: cyMatrix, axis: int) -> None: ...
def append(m1: cyMatrix, m2: cyMatrix) -> cyMatrix: ...

def get_shape(m: cyMatrix) -> Union[Tuple[int, int], Tuple[int], Tuple[()]]: ...
def get_ndim(m: cyMatrix) -> int: ...
def get_size(m: cyMatrix) -> int: ...
def get_value(m: cyMatrix) -> Union[float, List[float], List[List[float]]]: ...
def get_value_int(m: cyMatrix) -> Union[int, List[int], List[List[int]]]: ...
def get_value_bool(m: cyMatrix) -> Union[bool, List[bool], List[List[bool]]]: ...
def reshape(m: cyMatrix, ndim: int, nrows: int, ncols: int) -> cyMatrix: ...
def fill(m: cyMatrix, value: Union[float, int]) -> None: ...
def get_nan() -> float: ...
def get_inf() -> float: ...
def isnan(m: float) -> bool: ...
def ravel(m: cyMatrix) -> List[float]: ...
def buildFromArr(arr: parray, nrows: int, ncols: int, ndim: int) -> cyMatrix: ...
def eye(n: int) -> cyMatrix: ...
def get_matrix_row(m: cyMatrix, n: int) -> cyMatrix: ...
def matrix_byindex(m: cyMatrix, idx: parray, axis: bool) -> cyMatrix: ...
